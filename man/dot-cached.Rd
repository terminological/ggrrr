% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standalone-cache.R
\name{.cached}
\alias{.cached}
\title{A simple pass-through filesystem cache for complex or long running operations}
\usage{
.cached(
  .expr,
  ...,
  .nocache = getOption("cache.disable", default = FALSE),
  .cache = .cache_loc(),
  .prefix = "cached",
  .stale = Inf
)
}
\arguments{
\item{.expr}{the code the output of which requires caching. Other than a
return value this should not create side effects or change global
variables.}

\item{...}{inputs that the code in \code{.expr} depends on and changes in which
require the code re-running.}

\item{.nocache}{an option to defeat the cacheing which can be set globally as
\code{options("cache.disable"=TRUE)}}

\item{.cache}{the location of the cache as a directory. May get its value
from \code{getOption("cache.path")} or the default value which is
\verb{rappdirs::user_cache_dir(<package_name>)}}

\item{.prefix}{(optional) a name of the operation so that you can namespace
the cached files and do selective clean up operations on them with
.cache_clear()}

\item{.stale}{the length of time in days before considering cached data as
stale.}
}
\value{
the output of \code{.expr} which will usually be a value
}
\description{
executes \code{.expr} and saves the output as an RDS file indexed by hash of code in
\code{.expr} and the hash of specified input variables (in \code{...},  which should
contain any inputs that influence \code{.expr}). The expression is evaluated in the
current environment and it is up to the user to ensure all significant
environmental factors are accounted for in \code{...}
}
\concept{cache}
\keyword{internal}

\section{Unit tests}{
\if{html}{\out{<div class="sourceCode">}}\preformatted{

# we use `rnorm` here to prove that the cache is working but in reality
# you would normally only use something deterministic in `.expr`:
x = 100
tmp = .cached(stats::rnorm(x), x)
tmp2 = .cached(stats::rnorm(x), x)
testthat::expect_equal(tmp, tmp2)

x = 200
tmp3 = .cached(stats::rnorm(x), x)
testthat::expect_equal(x, length(tmp3))

}\if{html}{\out{</div>}}
}

