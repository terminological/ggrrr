% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/standalone-struct-list.R
\name{map_struct}
\alias{map_struct}
\title{Apply a function to each element of a vector}
\usage{
map_struct(.x, .f, ..., .progress = FALSE)
}
\arguments{
\item{.x}{a \code{struct_list}}

\item{.f}{a function to apply to each structure}

\item{...}{additional parameters to  \code{.f} but anonymous function preferred}

\item{.progress}{display a progress bar (logical or string name)}
}
\value{
a \code{struct_list}
}
\description{
The map functions transform their input by applying a function to
each element of a list or atomic vector and returning an object of
the same length as the input.
\itemize{
\item \code{map()} always returns a list. See the \code{\link[purrr:modify]{modify()}} family for
versions that return an object of the same type as the input.
\item \code{map_lgl()}, \code{map_int()}, \code{map_dbl()} and \code{map_chr()} return an
atomic vector of the indicated type (or die trying). For these functions,
\code{.f} must return a length-1 vector of the appropriate type.
\item \code{map_vec()} simplifies to the common type of the output. It works with
most types of simple vectors like Date, POSIXct, factors, etc.
\item \code{walk()} calls \code{.f} for its side-effect and returns
the input \code{.x}.
}
}
\seealso{
\code{\link[purrr:map]{purrr::map()}}
}
\concept{structures}
